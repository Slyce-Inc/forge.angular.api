/**
 * Slyce API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: admin@slyce.it
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DatasetDoc } from '../model/datasetDoc';
import { InlineResponse2002 } from '../model/inlineResponse2002';
import { InlineResponse2003 } from '../model/inlineResponse2003';
import { NewDatasetDoc } from '../model/newDatasetDoc';
import { NewDatasetItemDoc } from '../model/newDatasetItemDoc';
import { NewExternalDatasetDoc } from '../model/newExternalDatasetDoc';
import { NewJobDoc } from '../model/newJobDoc';
import { NewReferenceDatasetDoc } from '../model/newReferenceDatasetDoc';
import { UpdateDatasetDoc } from '../model/updateDatasetDoc';
import { UpdateExternalDatasetDoc } from '../model/updateExternalDatasetDoc';
import { UpdateReferenceDatasetDoc } from '../model/updateReferenceDatasetDoc';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DatasetsService {

    protected basePath = 'http://localhostnull';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * List datasets
     * 
     * @param accountId 
     * @param spaceId 
     * @param pageNumber The page number to get
     * @param pageSize The number of items to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsCreateDataset(accountId: string, spaceId: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2002>;
    public datasetsCreateDataset(accountId: string, spaceId: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2002>>;
    public datasetsCreateDataset(accountId: string, spaceId: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2002>>;
    public datasetsCreateDataset(accountId: string, spaceId: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsCreateDataset.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsCreateDataset.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined) {
            queryParameters = queryParameters.set('page_number', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.get<InlineResponse2002>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new dataset
     * 
     * @param accountId 
     * @param spaceId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsCreateDataset_1(accountId: string, spaceId: string, body: NewDatasetDoc, observe?: 'body', reportProgress?: boolean): Observable<NewJobDoc>;
    public datasetsCreateDataset_1(accountId: string, spaceId: string, body: NewDatasetDoc, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewJobDoc>>;
    public datasetsCreateDataset_1(accountId: string, spaceId: string, body: NewDatasetDoc, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewJobDoc>>;
    public datasetsCreateDataset_1(accountId: string, spaceId: string, body: NewDatasetDoc, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsCreateDataset_1.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsCreateDataset_1.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling datasetsCreateDataset_1.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<NewJobDoc>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new external dataset
     * 
     * @param accountId 
     * @param spaceId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsCreateExternalDataset(accountId: string, spaceId: string, body: NewExternalDatasetDoc, observe?: 'body', reportProgress?: boolean): Observable<NewJobDoc>;
    public datasetsCreateExternalDataset(accountId: string, spaceId: string, body: NewExternalDatasetDoc, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewJobDoc>>;
    public datasetsCreateExternalDataset(accountId: string, spaceId: string, body: NewExternalDatasetDoc, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewJobDoc>>;
    public datasetsCreateExternalDataset(accountId: string, spaceId: string, body: NewExternalDatasetDoc, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsCreateExternalDataset.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsCreateExternalDataset.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling datasetsCreateExternalDataset.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<NewJobDoc>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/external`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new reference dataset
     * 
     * @param accountId 
     * @param spaceId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsCreateReferenceDataset(accountId: string, spaceId: string, body: NewReferenceDatasetDoc, observe?: 'body', reportProgress?: boolean): Observable<NewJobDoc>;
    public datasetsCreateReferenceDataset(accountId: string, spaceId: string, body: NewReferenceDatasetDoc, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewJobDoc>>;
    public datasetsCreateReferenceDataset(accountId: string, spaceId: string, body: NewReferenceDatasetDoc, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewJobDoc>>;
    public datasetsCreateReferenceDataset(accountId: string, spaceId: string, body: NewReferenceDatasetDoc, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsCreateReferenceDataset.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsCreateReferenceDataset.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling datasetsCreateReferenceDataset.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<NewJobDoc>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/reference`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get information about a dataset
     * Get information about a specific dataset.
     * @param accountId 
     * @param spaceId 
     * @param datasetId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsDeleteDataset(accountId: string, spaceId: string, datasetId: string, observe?: 'body', reportProgress?: boolean): Observable<DatasetDoc>;
    public datasetsDeleteDataset(accountId: string, spaceId: string, datasetId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DatasetDoc>>;
    public datasetsDeleteDataset(accountId: string, spaceId: string, datasetId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DatasetDoc>>;
    public datasetsDeleteDataset(accountId: string, spaceId: string, datasetId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsDeleteDataset.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsDeleteDataset.');
        }
        if (datasetId === null || datasetId === undefined) {
            throw new Error('Required parameter datasetId was null or undefined when calling datasetsDeleteDataset.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.get<DatasetDoc>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/${encodeURIComponent(String(datasetId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a dataset
     * Remove a dataset entirely.
     * @param accountId 
     * @param spaceId 
     * @param datasetId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsDeleteDataset_2(accountId: string, spaceId: string, datasetId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public datasetsDeleteDataset_2(accountId: string, spaceId: string, datasetId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public datasetsDeleteDataset_2(accountId: string, spaceId: string, datasetId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public datasetsDeleteDataset_2(accountId: string, spaceId: string, datasetId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsDeleteDataset_2.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsDeleteDataset_2.');
        }
        if (datasetId === null || datasetId === undefined) {
            throw new Error('Required parameter datasetId was null or undefined when calling datasetsDeleteDataset_2.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/${encodeURIComponent(String(datasetId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a dataset
     * Update an existing dataset.
     * @param accountId 
     * @param spaceId 
     * @param datasetId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsDeleteDataset_3(accountId: string, spaceId: string, datasetId: string, body: UpdateDatasetDoc, observe?: 'body', reportProgress?: boolean): Observable<NewJobDoc>;
    public datasetsDeleteDataset_3(accountId: string, spaceId: string, datasetId: string, body: UpdateDatasetDoc, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewJobDoc>>;
    public datasetsDeleteDataset_3(accountId: string, spaceId: string, datasetId: string, body: UpdateDatasetDoc, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewJobDoc>>;
    public datasetsDeleteDataset_3(accountId: string, spaceId: string, datasetId: string, body: UpdateDatasetDoc, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsDeleteDataset_3.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsDeleteDataset_3.');
        }
        if (datasetId === null || datasetId === undefined) {
            throw new Error('Required parameter datasetId was null or undefined when calling datasetsDeleteDataset_3.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling datasetsDeleteDataset_3.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<NewJobDoc>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/${encodeURIComponent(String(datasetId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Import Items With CSV
     * 
     * @param accountId 
     * @param spaceId 
     * @param datasetId 
     * @param csv file to upload
     * @param countryCodes The country codes of the items, in iso-alpha-2 format. If then data items are for any country leave empty.
     * @param languageCode The language code of the items, in iso-alpha-2 format. Defaults to &#39;en&#39;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsImportCsvItems(accountId: string, spaceId: string, datasetId: string, csv: Blob, countryCodes?: Array<string>, languageCode?: string, observe?: 'body', reportProgress?: boolean): Observable<NewJobDoc>;
    public datasetsImportCsvItems(accountId: string, spaceId: string, datasetId: string, csv: Blob, countryCodes?: Array<string>, languageCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewJobDoc>>;
    public datasetsImportCsvItems(accountId: string, spaceId: string, datasetId: string, csv: Blob, countryCodes?: Array<string>, languageCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewJobDoc>>;
    public datasetsImportCsvItems(accountId: string, spaceId: string, datasetId: string, csv: Blob, countryCodes?: Array<string>, languageCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsImportCsvItems.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsImportCsvItems.');
        }
        if (datasetId === null || datasetId === undefined) {
            throw new Error('Required parameter datasetId was null or undefined when calling datasetsImportCsvItems.');
        }
        if (csv === null || csv === undefined) {
            throw new Error('Required parameter csv was null or undefined when calling datasetsImportCsvItems.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (countryCodes) {
            formParams = formParams.append('country_codes', countryCodes.join(COLLECTION_FORMATS['csv'])) || formParams;
        }
        if (languageCode !== undefined) {
            formParams = formParams.append('language_code', <any>languageCode) || formParams;
        }
        if (csv !== undefined) {
            formParams = formParams.append('csv', <any>csv) || formParams;
        }

        return this.httpClient.post<NewJobDoc>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/${encodeURIComponent(String(datasetId))}/items/csv`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List items by dataset
     * 
     * @param accountId 
     * @param spaceId 
     * @param datasetId 
     * @param pageNumber The page number to get
     * @param pageSize The number of items to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsListItemsByDataset(accountId: string, spaceId: string, datasetId: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2003>;
    public datasetsListItemsByDataset(accountId: string, spaceId: string, datasetId: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2003>>;
    public datasetsListItemsByDataset(accountId: string, spaceId: string, datasetId: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2003>>;
    public datasetsListItemsByDataset(accountId: string, spaceId: string, datasetId: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsListItemsByDataset.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsListItemsByDataset.');
        }
        if (datasetId === null || datasetId === undefined) {
            throw new Error('Required parameter datasetId was null or undefined when calling datasetsListItemsByDataset.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageNumber !== undefined) {
            queryParameters = queryParameters.set('page_number', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.get<InlineResponse2003>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/${encodeURIComponent(String(datasetId))}/items/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Import Items
     * 
     * @param accountId 
     * @param spaceId 
     * @param datasetId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsListItemsByDataset_4(accountId: string, spaceId: string, datasetId: string, body: NewDatasetItemDoc, observe?: 'body', reportProgress?: boolean): Observable<NewJobDoc>;
    public datasetsListItemsByDataset_4(accountId: string, spaceId: string, datasetId: string, body: NewDatasetItemDoc, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewJobDoc>>;
    public datasetsListItemsByDataset_4(accountId: string, spaceId: string, datasetId: string, body: NewDatasetItemDoc, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewJobDoc>>;
    public datasetsListItemsByDataset_4(accountId: string, spaceId: string, datasetId: string, body: NewDatasetItemDoc, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsListItemsByDataset_4.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsListItemsByDataset_4.');
        }
        if (datasetId === null || datasetId === undefined) {
            throw new Error('Required parameter datasetId was null or undefined when calling datasetsListItemsByDataset_4.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling datasetsListItemsByDataset_4.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<NewJobDoc>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/${encodeURIComponent(String(datasetId))}/items/`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Clear a dataset&#39;s items
     * Remove all data items from a dataset.
     * @param accountId 
     * @param spaceId 
     * @param datasetId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsListItemsByDataset_5(accountId: string, spaceId: string, datasetId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public datasetsListItemsByDataset_5(accountId: string, spaceId: string, datasetId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public datasetsListItemsByDataset_5(accountId: string, spaceId: string, datasetId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public datasetsListItemsByDataset_5(accountId: string, spaceId: string, datasetId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsListItemsByDataset_5.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsListItemsByDataset_5.');
        }
        if (datasetId === null || datasetId === undefined) {
            throw new Error('Required parameter datasetId was null or undefined when calling datasetsListItemsByDataset_5.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/${encodeURIComponent(String(datasetId))}/items/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an external dataset
     * Update an existing external dataset.
     * @param accountId 
     * @param spaceId 
     * @param datasetId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsUpdateExternalDataset(accountId: string, spaceId: string, datasetId: string, body: UpdateExternalDatasetDoc, observe?: 'body', reportProgress?: boolean): Observable<NewJobDoc>;
    public datasetsUpdateExternalDataset(accountId: string, spaceId: string, datasetId: string, body: UpdateExternalDatasetDoc, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewJobDoc>>;
    public datasetsUpdateExternalDataset(accountId: string, spaceId: string, datasetId: string, body: UpdateExternalDatasetDoc, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewJobDoc>>;
    public datasetsUpdateExternalDataset(accountId: string, spaceId: string, datasetId: string, body: UpdateExternalDatasetDoc, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsUpdateExternalDataset.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsUpdateExternalDataset.');
        }
        if (datasetId === null || datasetId === undefined) {
            throw new Error('Required parameter datasetId was null or undefined when calling datasetsUpdateExternalDataset.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling datasetsUpdateExternalDataset.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<NewJobDoc>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/external/${encodeURIComponent(String(datasetId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a reference dataset
     * Update an existing reference dataset.
     * @param accountId 
     * @param spaceId 
     * @param datasetId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsUpdateReferenceDataset(accountId: string, spaceId: string, datasetId: string, body: UpdateReferenceDatasetDoc, observe?: 'body', reportProgress?: boolean): Observable<NewJobDoc>;
    public datasetsUpdateReferenceDataset(accountId: string, spaceId: string, datasetId: string, body: UpdateReferenceDatasetDoc, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewJobDoc>>;
    public datasetsUpdateReferenceDataset(accountId: string, spaceId: string, datasetId: string, body: UpdateReferenceDatasetDoc, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewJobDoc>>;
    public datasetsUpdateReferenceDataset(accountId: string, spaceId: string, datasetId: string, body: UpdateReferenceDatasetDoc, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsUpdateReferenceDataset.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsUpdateReferenceDataset.');
        }
        if (datasetId === null || datasetId === undefined) {
            throw new Error('Required parameter datasetId was null or undefined when calling datasetsUpdateReferenceDataset.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling datasetsUpdateReferenceDataset.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<NewJobDoc>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/reference/${encodeURIComponent(String(datasetId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload legacy catalog
     * 
     * @param accountId 
     * @param spaceId 
     * @param catalogZip The file to upload
     * @param datasetName The name of the dataset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public datasetsUploadLegacyCatalog(accountId: string, spaceId: string, catalogZip: Blob, datasetName?: string, observe?: 'body', reportProgress?: boolean): Observable<NewJobDoc>;
    public datasetsUploadLegacyCatalog(accountId: string, spaceId: string, catalogZip: Blob, datasetName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NewJobDoc>>;
    public datasetsUploadLegacyCatalog(accountId: string, spaceId: string, catalogZip: Blob, datasetName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NewJobDoc>>;
    public datasetsUploadLegacyCatalog(accountId: string, spaceId: string, catalogZip: Blob, datasetName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling datasetsUploadLegacyCatalog.');
        }
        if (spaceId === null || spaceId === undefined) {
            throw new Error('Required parameter spaceId was null or undefined when calling datasetsUploadLegacyCatalog.');
        }
        if (catalogZip === null || catalogZip === undefined) {
            throw new Error('Required parameter catalogZip was null or undefined when calling datasetsUploadLegacyCatalog.');
        }

        let headers = this.defaultHeaders;

        // authentication (slyce-account-id) required
        if (this.configuration.apiKeys["slyce-account-id"]) {
            headers = headers.set('slyce-account-id', this.configuration.apiKeys["slyce-account-id"]);
        }

        // authentication (slyce-api-key) required
        if (this.configuration.apiKeys["slyce-api-key"]) {
            headers = headers.set('slyce-api-key', this.configuration.apiKeys["slyce-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (datasetName !== undefined) {
            formParams = formParams.append('dataset_name', <any>datasetName) || formParams;
        }
        if (catalogZip !== undefined) {
            formParams = formParams.append('catalog_zip', <any>catalogZip) || formParams;
        }

        return this.httpClient.post<NewJobDoc>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/spaces/${encodeURIComponent(String(spaceId))}/datasets/catalog`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
